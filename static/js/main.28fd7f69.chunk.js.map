{"version":3,"sources":["components/Navbar.tsx","features/chartBars/ChartBarsSlice.tsx","components/BarChart.tsx","components/Charts.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/chartDoughnut/DoughnutSlice.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Navbar","className","chartBarsSlice","createSlice","name","initialState","data","total","reducers","addBar","state","action","newBar","task","payload","time","volumes","Number","productivity","weight","find","el","includes","push","console","log","getTotal","totalWeight","reduce","totalProductivity","toFixed","clearData","actions","selectChartBars","chartBars","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","options","responsive","maintainAspectRatio","plugins","legend","display","position","title","text","BarChart","useSelector","labels","map","datasets","label","backgroundColor","Charts","useState","setTime","setVolume","setTask","dispatch","useDispatch","calculateProductivity","currentTask","taskList","undefined","targetPerHour","m","Math","abs","toPrecision","round","sign","targetPerDay","onSubmit","event","preventDefault","id","value","onChange","e","target","defaultValue","hidden","placeholder","type","onClick","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","chartDoughnutSlice","production","meeting","specjelProject","datachuj","update","b","splice","store","configureStore","reducer","counter","counterReducer","chartBarsReducer","chartDoughnut","doughnutChartReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28fd7f69.chunk.js","sourcesContent":["import { IoStatsChart } from \"react-icons/io5\";\n\nexport const Navbar = () => {\n  return (\n    <>\n      <div className=\"navbar\">\n        <div className=\"navbar_wrapper\">\n          <h2 className=\"navbar_logo\">\n            <span>T</span>\n            <span className=\"navbar_logo_details\">Track</span>\n          </h2>\n        </div>\n      </div>\n      <div className=\"navbar_icons_wrapper\">\n      <nav className=\"navbar_icons_container\">\n        <ul> \n        <li><IoStatsChart className=\"icon\" />Productivity</li>\n        {/* <li><IoPieChart className=\"icon\" />Utilization</li> */}\n        {/* <IoCalendarNumber className=\"icon\" /> */}\n        {/* <li><IoSettings className=\"icon\" />Settings</li> */}\n        </ul>\n      </nav>\n      </div>\n    </>\n  );\n};\n\nexport default Navbar;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\n\ninterface Data {\n  time: string;\n  volumes: number;\n  task: string;\n  productivity: number;\n  weight: number;\n}\n\ninterface ChartBars {\n  data: Data[];\n  total: string;\n}\n\nconst initialState: ChartBars = {\n  data: [],\n  total: \"\",\n};\n\nexport const chartBarsSlice = createSlice({\n  name: \"chartBars\",\n  initialState,\n  reducers: {\n    addBar: (state, action) => {\n      const newBar = {\n        task: action.payload.task,\n        time: action.payload.time,\n        volumes: Number(action.payload.volumes),\n        productivity: action.payload.productivity,\n        weight: action.payload.weight,\n      };\n      if (!state.data.find((el) => el.task.includes(action.payload.task))) {\n        state.data.push(newBar);\n      }\n      console.log(state.data);\n    },\n    getTotal: (state) => {\n      const sumProd = (total: number, el: { volumes: number }) => {\n        return total + el.volumes;\n      };\n\n      const sumWeight = (total: number, el: { weight: number }) => {\n        return total + el.weight;\n      };\n\n      let totalWeight = state.data.reduce(sumWeight, 0);\n      let totalProductivity = state.data.reduce(sumProd, 0);\n\n      state.total = ((totalWeight / totalProductivity) * 100).toFixed(2);\n      console.log(state.total);\n    },\n    clearData: (state) => {\n      state.data = [];\n      state.total = \"\";\n    },\n  },\n});\n\nexport const { addBar, getTotal, clearData } = chartBarsSlice.actions;\nexport const selectChartBars = (state: RootState) => state.chartBars;\nexport default chartBarsSlice.reducer;\n","import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport { selectChartBars } from \"../features/chartBars/ChartBarsSlice\";\nimport { useSelector } from \"react-redux\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      display: false,\n      position: \"top\" as const,\n    },\n    title: {\n      display: false,\n      text: \"Chart.js Bar Chart\",\n    },\n  },\n};\n\nexport function BarChart() {\n  const chartBars = useSelector(selectChartBars);\n  const labels = chartBars.data.map((el) => el.task);\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: \"Productivity in %\",\n        data: chartBars.data.map((el) => el.productivity),\n        backgroundColor: \"#3744BD\",\n      },\n    ],\n  };\n\n  return <Bar options={options} data={data} />;\n}\n","import { useState } from \"react\";\nimport { IoAddOutline, IoTrashOutline } from \"react-icons/io5\";\nimport { BarChart } from \"./BarChart\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  addBar,\n  getTotal,\n  selectChartBars,\n  clearData\n} from \"../features/chartBars/ChartBarsSlice\";\n\nexport const Charts = () => {\n  const [time, setTime] = useState(\"\");\n  const [volumes, setVolume] = useState(\"\");\n  const [task, setTask] = useState(\"\");\n\n  const chartBars = useSelector(selectChartBars);\n  const dispatch = useDispatch();\n\n  const calculateProductivity = (task: string) => {\n    if (task === \"\") return 0;\n    const currentTask = taskList.find((el) => el.name === task);\n\n    if (currentTask === undefined) return 0;\n    const productivity =\n      (Number(volumes) / Number(time) / currentTask.targetPerHour) * 100;\n\n    function round() {\n      const m = Number((Math.abs(productivity) * 100).toPrecision(15));\n      return (Math.round(m) / 100) * Math.sign(productivity);\n    }\n\n    return round();\n  };\n\n  const calculateWeight = () => {\n    if (calculateProductivity(task) === 0) return 0;\n    let weight = (calculateProductivity(task) * Number(volumes)) / 100;\n    return weight;\n  };\n\n  const onSubmit = (event: any) => {\n    event.preventDefault();\n    if (Number(time) > 0 && Number(volumes) > 0 && task !== \"\") {\n      dispatch(\n        addBar({\n          time,\n          volumes,\n          task,\n          productivity: calculateProductivity(task),\n          weight: calculateWeight(),\n        })\n      );\n      dispatch(getTotal());\n      setTime(\"\");\n      setVolume(\"\");\n      setTask(\"\");\n    }\n  };\n\n  const handleClick = () => {\n    dispatch(clearData());\n  }\n\n  const taskList = [\n    { name: \"task1\", targetPerHour: 211.27, targetPerDay: 800 },\n    {\n      name: \"task2\",\n      targetPerHour: 13.1,\n      targetPerDay: 93,\n    },\n    { name: \"task3\", targetPerHour: 104.65, targetPerDay: 743 },\n    {\n      name: \"task4\",\n      targetPerHour: 35.77,\n      targetPerDay: 254,\n    },\n    {\n      name: \"task5\",\n      targetPerHour: 47.89,\n      targetPerDay: 800,\n    },\n    { name: \"task6\", targetPerHour: 20, targetPerDay: 800 },\n    { name: \"task7\", targetPerHour: 78.45, targetPerDay: 800 },\n    { name: \"task8\", targetPerHour: 45.77, targetPerDay: 325 },\n  ];\n\n  return (\n    <div className=\"charts_container\">\n      <div className=\"controls_container\">\n        <h1 className=\"heading\">Calculator</h1>\n        <form className=\"productivity_form\" onSubmit={onSubmit}>\n        <select\n            className=\"select\"\n            name=\"task\"\n            id=\"task\"\n            value={task}\n            onChange={(e) => setTask(e.target.value)}\n          >\n            <option defaultValue=\"\" hidden>\n              Pick a task\n            </option>\n            {taskList.map((el) => (\n              <option key={el.name} value={el.name}>\n                {el.name}\n              </option>\n            ))}\n          </select>\n          <input\n            className=\"input\"\n            placeholder=\"Time(H):\"\n            value={time}\n            onChange={(e) => setTime(e.target.value)}\n          />\n\n          <input\n            className=\"input\"\n            placeholder=\"Volumes:\"\n            value={volumes}\n            onChange={(e) => setVolume(e.target.value)}\n          />\n          <button className=\"button\" type=\"submit\">\n          <span className=\"button_wrapper\"><IoAddOutline className=\"icon\" />Add</span>\n          </button>\n          <button className=\"button button_reset\" onClick={() => handleClick()}><span className=\"button_wrapper\"><IoTrashOutline className=\"icon\" />Reset</span></button>\n        </form>\n      </div>\n      <div className=\"charts_crapper\">\n        <div className=\"productivity\"></div>\n        <h2 className=\"sub_title\">Total productivity: {chartBars.total}%</h2>\n        <div className=\"chart_wrapper\">\n          <BarChart />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Charts;","import './App.css';\nimport './scss/index.scss';\nimport Navbar from './components/Navbar';\nimport Charts from './components/Charts';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"dashboard\">\n     <Navbar />\n     <Charts />\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\n\nexport interface ChartDoughnut {\n  meeting: number[];\n  specjelProject: [];\n  production: number[];\n  datachuj: number[]\n}\n\n// const initialState: ChartDoughnut[] = [];\n\nconst initialState: ChartDoughnut = {\n  production: [],\n  meeting: [],\n  specjelProject: [],\n  datachuj: []\n};\n\nexport const chartDoughnutSlice = createSlice({\n  name: \"chartDoughnut\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    addBar: (state, action) => {\n      // let newBar = {\n      //   task: action.payload.task,\n      //   time: action.payload.time,\n      // };\n\n      if (action.payload.task === \"Production\") {\n        let data = state.datachuj\n        data.push(action.payload.time);\n        const sum = (a: number, b: number) => {\n          return a + b;\n        };\n\n        let update = data.reduce(sum, 0)\n        \n        state.production.push(update);\n      }\n\n      if (action.payload.task === \"Meeting\") {\n        let data = []\n        data.push(action.payload.time);\n        const sum = (a: number, b: number) => {\n          return a + b;\n        };\n        state.meeting.splice(data.reduce(sum, 0));\n      }\n      // let filteredData = state.filter((el) => el.task === action.payload.task);\n\n      // const sum = (total: number, el: { task: string; time: number }) => {\n      //   return total + el.time;\n      // };\n      // let sumData = filteredData.reduce(sum, 0);\n      // console.log(sumData);\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n});\n\nexport const { addBar } = chartDoughnutSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectChartDoughnut = (state: RootState) => state.chartDoughnut;\n\nexport default chartDoughnutSlice.reducer;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counterSlice\";\nimport chartBarsReducer from \"../features/chartBars/ChartBarsSlice\";\nimport doughnutChartReducer from \"../features/chartDoughnut/DoughnutSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    chartBars: chartBarsReducer,\n    chartDoughnut: doughnutChartReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}