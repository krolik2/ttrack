{"version":3,"sources":["components/Navbar.tsx","data/data.ts","features/chartBars/ChartBarsSlice.tsx","components/BarChart.tsx","app/hooks.ts","components/Modal.tsx","components/TaskList.tsx","components/Dashboard.tsx","components/Settings.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Navbar","className","to","taskData","name","id","targetPerHour","chartBarsSlice","createSlice","initialState","data","total","reducers","addBar","state","payload","push","removeBar","filter","el","task","editBar","map","volumes","time","editedBar","find","calculateTotal","length","calculateProductivity","productivity","calculateWeight","weight","getRandomColor","color","clearData","getProductivity","dispatch","getState","taskToUpdate","chartBars","selectedTask","undefined","Number","result","m","Math","abs","toPrecision","round","sign","getWeight","getTotal","currentState","reduce","prev","next","toFixed","colors","usedColors","actions","selectChartBars","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","options","responsive","maintainAspectRatio","plugins","legend","display","position","title","text","BarChart","useSelector","useState","labels","datasets","backgroundColor","hoverBackgroundColor","chartsData","setChartsData","useEffect","redraw","useAppDispatch","useDispatch","useAppSelector","Modal","toggleModal","setState","handleChange","useCallback","e","value","target","onClick","onSubmit","preventDefault","htmlFor","onChange","type","TaskList","showModal","setShowModal","style","borderColor","toString","editData","Dashboard","event","includes","array","chooser","remainingColors","item","floor","random","defaultValue","hidden","placeholder","Settings","App","path","element","store","configureStore","reducer","chartBarsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84196f61.chunk.js","sourcesContent":["import { IoStatsChart, IoSettings, IoListSharp } from \"react-icons/io5\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Navbar = () => {\n  return (\n    <>\n      <div className=\"navbar\">\n        <div className=\"navbar_wrapper\">\n          <h2 className=\"navbar_logo\">\n            <span>T</span>\n            <span className=\"navbar_logo_details\">Track</span>\n          </h2>\n        </div>\n        <nav className=\"navbar_icons_wrapper\">\n          <ul className=\"navbar_icons_container\">\n            <li className=\"nav-item\">\n              <NavLink to=\"/\">\n                <IoStatsChart className=\"icon\"></IoStatsChart>Productivity\n              </NavLink>\n            </li>\n            {/* <li className=\"nav-item\">\n              <NavLink to=\"manage-tasks\">\n                <IoListSharp className=\"icon\" />\n                Manage Tasks\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink to=\"settings\">\n                <IoSettings className=\"icon\" />\n                Settings\n              </NavLink>\n            </li> */}\n          </ul>\n        </nav>\n      </div>\n    </>\n  );\n};\n\nexport default Navbar;\n","export const taskData = [\n  { name: \"task1\", id: 1, targetPerHour: 211.27 },\n  { name: \"task2\", id: 2, targetPerHour: 13.1 },\n  { name: \"task3\", id: 3, targetPerHour: 104.65 },\n  { name: \"task4\", id: 4, targetPerHour: 35.77 },\n  { name: \"task5\", id: 5, targetPerHour: 30 },\n  { name: \"task6\", id: 6, targetPerHour: 20 },\n  { name: \"task7\", id: 7, targetPerHour: 78.45 },\n  { name: \"task8\", id: 8, targetPerHour: 500 },\n  { name: \"task9\", id: 9, targetPerHour: 35.21 },\n  { name: \"task10\", id: 10, targetPerHour: 35.92 },\n  { name: \"task11\", id: 11, targetPerHour: 21.97 },\n  { name: \"task12\", id: 12, targetPerHour: 42.25 },\n  { name: \"task13\", id: 13, targetPerHour: 140 },\n  { name: \"task14\", id: 14, targetPerHour: 300 },\n  { name: \"task15\", id: 15, targetPerHour: 60 },\n  { name: \"task16\", id: 16, targetPerHour: 280 },\n];\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { taskData } from \"../../data/data\";\n\nexport interface Data {\n  time: string;\n  volumes: number;\n  task: string;\n  productivity: number;\n  weight: number;\n  color: string;\n}\n\ninterface ChartBars {\n  data: Data[];\n  total: string;\n}\n\nconst initialState: ChartBars = {\n  data: [],\n  total: \"\",\n};\n\nexport const chartBarsSlice = createSlice({\n  name: \"chartBars\",\n  initialState,\n  reducers: {\n    addBar: (state, { payload }) => {\n      state.data.push(payload);\n    },\n    removeBar: (state, { payload }) => {\n      state.data = state.data.filter((el) => el.task !== payload);\n    },\n    editBar: (state, { payload }) => {\n      state.data = state.data.map((el) => {\n        if (el.task === payload.task) {\n          return {\n            ...el,\n            volumes: payload.volumes,\n            time: payload.time,\n          };\n        }\n        return el;\n      });\n      let editedBar = state.data.find((el) => el.task === payload);\n      if (editedBar) {\n        editedBar.volumes = payload.volumes;\n        editedBar.time = payload.time;\n      }\n    },\n    calculateTotal: (state, { payload }) => {\n      if (state.data.length < 1) {\n        state.total = \"0\";\n      } else {\n        state.total = payload;\n      }\n    },\n    calculateProductivity: (state, { payload }) => {\n      let editedBar = state.data.find((el) => el.task === payload.task);\n      if (editedBar) {\n        editedBar.productivity = payload.productivity;\n      }\n    },\n    calculateWeight: (state, { payload }) => {\n      let editedBar = state.data.find((el) => el.task === payload.task);\n      if (editedBar) {\n        editedBar.weight = payload.weight;\n      }\n    },\n    getRandomColor: (state, { payload }) => {\n      let editedBar = state.data.find((el) => el.task === payload.task);\n      if (editedBar) {\n        editedBar.color = payload.color;\n      }\n    },\n    clearData: (state) => {\n      state.data = [];\n      state.total = \"\";\n    },\n  },\n});\n\nexport const getProductivity =\n  (task: string) => (dispatch: any, getState: any) => {\n    const currentState = getState().chartBars;\n    const taskToUpdate = currentState.data.find((el: any) => el.task === task);\n    if (task === \"\") return 0;\n    const selectedTask = taskData.find((el) => el.name === task);\n\n    if (selectedTask === undefined) return 0;\n    const productivity =\n      (Number(taskToUpdate.volumes) /\n        Number(taskToUpdate.time) /\n        selectedTask.targetPerHour) *\n      100;\n\n    function round() {\n      const m = Number((Math.abs(productivity) * 100).toPrecision(15));\n      return (Math.round(m) / 100) * Math.sign(productivity);\n    }\n    const result = { ...taskToUpdate, productivity: round() };\n\n    dispatch(calculateProductivity(result));\n  };\n\nexport const getWeight = (task: string) => (dispatch: any, getState: any) => {\n  const currentState = getState().chartBars;\n  const taskToUpdate = currentState.data.find((el: any) => el.task === task);\n  if (taskToUpdate.productivity === 0) return 0;\n  let weight = (taskToUpdate.productivity * Number(taskToUpdate.volumes)) / 100;\n  const result = { ...taskToUpdate, weight: weight };\n  dispatch(calculateWeight(result));\n};\n\nexport const getTotal = () => (dispatch: any, getState: any) => {\n  const currentState = getState().chartBars.data;\n\n  let totalWeight = currentState.reduce(\n    (prev: any, next: any) => prev + next.weight,\n    0\n  );\n\n  let totalVol = currentState.reduce(\n    (prev: any, next: any) => prev + next.volumes,\n    0\n  );\n\n  let total = ((totalWeight / totalVol) * 100).toFixed(2);\n\n  dispatch(calculateTotal(total));\n};\n\nlet colors = [\n  \"#3744BD\",\n  \"#8709E0\",\n  \"#F7027D\",\n  \"#E03909\",\n  \"#FC980A\",\n  \"#24F26D\",\n  \"#26FCAE\",\n  \"#2EE6D6\",\n  \"#26D5FC\",\n];\n\nconst usedColors: string[] = [];\n\nexport const randomColor = (task: string) => (dispatch: any, getState: any) => {\n  const currentState = getState().chartBars;\n  const taskToUpdate = currentState.data.find((el: any) => el.task === task);\n\n  function randomNoRepeats(array: string[]) {\n    return function () {\n      let remainingColors = array.filter(\n        (color) => !usedColors.includes(color)\n      );\n      if (remainingColors.length === 0) {\n        usedColors.length = 0;\n        remainingColors = array;\n      }\n      const index = Math.floor(Math.random() * remainingColors.length);\n      const item = remainingColors[index];\n      usedColors.push(item);\n      return item;\n    };\n  }\n\n  let chooser = randomNoRepeats(colors);\n\n  const result = { ...taskToUpdate, color: chooser() };\n  dispatch(getRandomColor(result));\n};\n\nexport const {\n  addBar,\n  editBar,\n  calculateProductivity,\n  clearData,\n  calculateTotal,\n  removeBar,\n  calculateWeight,\n  getRandomColor,\n} = chartBarsSlice.actions;\nexport const selectChartBars = (state: RootState) => state.chartBars;\nexport default chartBarsSlice.reducer;\n","import { useEffect, useState } from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport { selectChartBars } from \"../features/chartBars/ChartBarsSlice\";\nimport { useSelector } from \"react-redux\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      display: false,\n      position: \"top\" as const,\n    },\n    title: {\n      display: false,\n      text: \"Chart.js Bar Chart\",\n    },\n  },\n};\n\nexport function BarChart() {\n  const chartBars = useSelector(selectChartBars);\n\n  const [chartsData, setChartsData] = useState<{\n    labels: string[];\n    datasets: Array<{\n      data: number[];\n      backgroundColor: string[];\n      hoverBackgroundColor: string[]\n    }>;\n  }>({\n    labels: [],\n    datasets: [\n      {\n        data: [],\n        backgroundColor: [],\n        hoverBackgroundColor: []\n      },\n    ],\n  });\n\n  useEffect(() => {\n    function handleDataChange() {\n      setChartsData({\n        labels: chartBars.data.map((el) => el.task),\n        datasets: [\n          {\n            data: chartBars.data.map((el) => el.productivity),\n            backgroundColor: chartBars.data.map((el) => el.color),\n            hoverBackgroundColor: chartBars.data.map((el) => el.color)\n          },\n        ],\n      });\n    }\n\n    handleDataChange();\n  }, [chartBars]);\n\n\n  return <Bar options={options} data={chartsData} redraw={true}/>;\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { ChangeEvent, useCallback } from \"react\";\nimport { IoAddOutline } from \"react-icons/io5\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport {\n  editBar,\n  getProductivity,\n  getTotal,\n  getWeight,\n} from \"../features/chartBars/ChartBarsSlice\";\n\ninterface ModalProps {\n  state: { time: string; volumes: string; task: string };\n  setState: React.Dispatch<\n    React.SetStateAction<{ time: string; volumes: string; task: string }>\n  >;\n  toggleModal: () => void;\n}\n\nconst Modal = ({\n  toggleModal,\n  state,\n  setState,\n}: ModalProps) => {\n  const dispatch = useAppDispatch();\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    dispatch(\n      editBar({\n        task: state.task,\n        time: state.time,\n        volumes: Number(state.volumes),\n      })\n    );\n    dispatch(getProductivity(state.task));\n    dispatch(getWeight(state.task));\n    dispatch(getTotal());\n    toggleModal();\n  };\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setState({\n      ...state,\n      [e.target.name]: value,\n    });\n  }, [setState, state]);\n\n  return (\n    <div className=\"modal-bg\">\n      <div className=\"modal\">\n        <div className=\"modal-header\">\n          <div className=\"modal-header-wrapper\">\n            <h2 className=\"heading\">Edit Task</h2>\n            <IoAddOutline className=\"icon close\" onClick={toggleModal} />\n          </div>\n        </div>\n        <div className=\"modal-sub_header sub_title\">{state.task}</div>\n        <form className=\"modal-editable\" onSubmit={handleSubmit}>\n          <div className=\"modal-data-container\">\n          <div className=\"modal-data\">\n            <label className=\"label\" htmlFor=\"volumes\">Volumes:</label>\n            <input\n              className=\"input modal-input\"\n              id=\"volumes\"\n              name=\"volumes\"\n              value={state.volumes}\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"modal-data\">\n            <label className=\"label\" htmlFor=\"time\">Time:</label>\n            <input\n              className=\"input modal-input\"\n              id=\"time\"\n              name=\"time\"\n              value={state.time}\n              onChange={handleChange}\n            />\n          </div>\n          </div>\n          <div className=\"modal-btns\">\n            <button\n              type=\"button\"\n              className=\"button button_reset\"\n              onClick={toggleModal}\n            >\n              cancel\n            </button>\n            <button className=\"button btn-action\" type=\"submit\">\n              save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import { useCallback, useState } from \"react\";\nimport {\n  selectChartBars,\n  removeBar,\n  getTotal,\n} from \"../features/chartBars/ChartBarsSlice\";\n\nimport { useAppSelector, useAppDispatch } from \"../app/hooks\";\nimport Modal from \"./Modal\";\nimport { Data } from \"../features/chartBars/ChartBarsSlice\";\n\nconst TaskList = () => {\n  const chartBars = useAppSelector(selectChartBars);\n  const dispatch = useAppDispatch();\n\n  const handleDelete = (task: string) => {\n    dispatch(removeBar(task));\n    dispatch(getTotal());\n  };\n\n  const [showModal, setShowModal] = useState(false);\n  const [state, setState] = useState({\n    time: \"\",\n    volumes: \"\",\n    task: \"\",\n  });\n\n  const toggleModal = useCallback(\n    (): void => setShowModal(!showModal),\n    [showModal]\n  );\n\n  const editData = (el: Data) => {\n    setState({\n      ...state,\n      task: el.task,\n      time: el.time,\n      volumes: el.volumes.toString(),\n    });\n    toggleModal();\n  };\n\n  return (\n    <>\n        {chartBars.data.length ? (\n          chartBars.data.map((el) => (\n            <div\n              className=\"task_item\"\n              style={{ borderColor: `${el.color}` }}\n              key={el.task}\n            >\n              <div className=\"task_text\" onClick={() => editData(el)}>\n                <div className=\"task_item_title\">{el.task}</div>\n                <div className=\"task_item_time\">{`Time: ${el.time} h`}</div>\n                <div className=\"task_item_volumes\">{`Volumes: ${el.volumes}`}</div>\n              </div>\n              <div className=\"btn-container\">\n                <button\n                  className=\"close-container\"\n                  onClick={() => handleDelete(el.task)}\n                >\n                  <div className=\"leftright\"></div>\n                  <div className=\"rightleft\"></div>\n                </button>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"message\">\n            <h3 className=\"sub_title smaller\">\n              There are currently no tasks on your list... add something :)\n            </h3>\n          </div>\n        )}\n      {showModal && (\n        <Modal toggleModal={toggleModal} state={state} setState={setState} />\n      )}\n    </>\n  );\n};\n\nexport default TaskList;\n","import { useState, useCallback, ChangeEvent } from \"react\";\nimport { IoAddOutline, IoReloadSharp } from \"react-icons/io5\";\nimport { BarChart } from \"./BarChart\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport {\n  addBar,\n  getProductivity,\n  clearData,\n  getTotal,\n  getWeight,\n  selectChartBars,\n  randomColor,\n} from \"../features/chartBars/ChartBarsSlice\";\nimport { taskData } from \"../data/data\";\nimport TaskList from \"./TaskList\";\n\nexport const Dashboard = () => {\n  const [state, setState] = useState({\n    time: \"\",\n    volumes: \"\",\n    task: \"\",\n  });\n\n  const chartBars = useAppSelector(selectChartBars);\n  const dispatch = useAppDispatch();\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (\n      Number(state.time) > 0 &&\n      Number(state.volumes) > 0 &&\n      state.task !== \"\" &&\n      !chartBars.data.find((el) => el.task.includes(state.task))\n    ) {\n      dispatch(\n        addBar({\n          time: state.time,\n          volumes: Number(state.volumes),\n          task: state.task,\n          productivity: 0,\n          weight: 0,\n          color: null,\n        })\n      );\n      dispatch(getProductivity(state.task));\n      dispatch(getWeight(state.task));\n      dispatch(randomColor(state.task));\n      dispatch(getTotal());\n      setState({\n        ...state,\n        time: \"\",\n        volumes: \"\",\n        task: \"\",\n      });\n    }\n  };\n\n  const handleClick = () => {\n    dispatch(clearData());\n  };\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLSelectElement>) => {\n      let value = e.target.value;\n      setState({\n        ...state,\n        [e.target.name]: value,\n      });\n    },\n    [state]\n  );\n\n  return (\n    <div className=\"content\">\n        <h1 className=\"heading\">Calculator</h1>\n        <form className=\"productivity_form\" onSubmit={onSubmit}>\n          <div className=\"input-container\">\n            <select\n              className=\"select\"\n              name=\"task\"\n              id=\"task\"\n              value={state.task}\n              onChange={handleChange}\n            >\n              <option defaultValue=\"\" hidden>\n                Pick a task\n              </option>\n              {taskData.map((el) => (\n                <option key={el.name} value={el.name}>\n                  {el.name}\n                </option>\n              ))}\n            </select>\n            <input\n              className=\"input\"\n              placeholder=\"Time(H):\"\n              name=\"time\"\n              value={state.time}\n              onChange={handleChange}\n            />\n            <input\n              className=\"input\"\n              placeholder=\"Volumes:\"\n              name=\"volumes\"\n              value={state.volumes}\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"btn-container\">\n            <button className=\"button btn-action\" type=\"submit\">\n              <span className=\"button_wrapper\">\n                <IoAddOutline className=\"icon\" />\n                Add\n              </span>\n            </button>\n            <button\n              className=\"button button_reset\"\n              onClick={() => handleClick()}\n            >\n              <span className=\"button_wrapper\">\n                <IoReloadSharp className=\"icon\" />\n                Reset\n              </span>\n            </button>\n          </div>\n        </form>\n        <div className=\"sub_title_left\">\n          <h2 className=\"sub_title\">Total productivity: {chartBars.total}%</h2>\n        </div>\n        <div className=\"sub_title_right\">\n          <h2 className=\"sub_title\">Task list:</h2>\n        </div>\n        <div className=\"charts_left\">\n            <BarChart />\n        </div>\n        <div className=\"charts_right\">\n          <TaskList />\n        </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","export const Settings = () => {\n  return (\n    <div className=\"charts_container\">\n    </div>\n  );\n};\n\nexport default Settings;\n","import './App.css';\nimport './scss/index.scss';\nimport Navbar from './components/Navbar';\nimport Dashboard from './components/Dashboard';\nimport { Routes, Route } from \"react-router-dom\"\nimport Settings from './components/Settings';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"dashboard\">\n     <Navbar />\n     <Routes>\n        <Route path=\"/\" element={ <Dashboard /> } />\n        <Route path=\"settings\" element={ <Settings /> } />\n      </Routes>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport chartBarsReducer from \"../features/chartBars/ChartBarsSlice\";\n\n\nexport const store = configureStore({\n  reducer: {\n    chartBars: chartBarsReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}